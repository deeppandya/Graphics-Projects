/*	COMP 6761 Assignment 1 Framework
	Created by Kaustubha Mendhurwar on 09/09/14.
	Copyright (c) 2014 Concordia University. All rights reserved.
*/

#version 430

layout (vertices = 1) out;                                                                      
                                                                                                
uniform float TessLevelInner; 
uniform float TessLevelOuter;                                                                
                                                                                                
// attributes of the input CPs                                                                  
in vec3 _vertices[];                                                                                                                                         
in vec3 _normals[];                                                                         
                                                                                                
struct OutputPatch                                                                              
{                                                                                               
    vec3 B030;                                                                         
    vec3 B021;                                                                         
    vec3 B012;                                                                         
    vec3 B003;                                                                         
    vec3 B102;                                                                         
    vec3 B201;                                                                         
    vec3 B300;                                                                         
    vec3 B210;                                                                         
    vec3 B120;                                                                         
    vec3 B111;                                                                         
    vec3 Normal[3];                                                                                                                                                      
};                                                                                              
                                                                                                                                                               
out patch OutputPatch oPatch;                                                                   
                                                                                                
vec3 Projection(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)                              
{                                                                                               
    vec3 v = Point - PlanePoint;                                                                
    float Len = dot(v, PlaneNormal);                                                            
    vec3 d = Len * PlaneNormal;                                                                 
    return (Point - d);                                                                         
}                                                                                               
                                                                                                
                                                                                                
void setControlPoints()                                                                            
{                                                                                                                                                    
    oPatch.B030 = _vertices[0];                                                   
    oPatch.B003 = _vertices[1];                                                   
    oPatch.B300 = _vertices[2];                                                   
                                                                                                
                                         
    vec3 EdgeB300 = oPatch.B003 - oPatch.B030;                                
    vec3 EdgeB030 = oPatch.B300 - oPatch.B003;                                
    vec3 EdgeB003 = oPatch.B030 - oPatch.B300;                                
                                                     
    oPatch.B021 = oPatch.B030 + EdgeB300 / 3.0;                               
    oPatch.B012 = oPatch.B030 + EdgeB300 * 2.0 / 3.0;                         
    oPatch.B102 = oPatch.B003 + EdgeB030 / 3.0;                               
    oPatch.B201 = oPatch.B003 + EdgeB030 * 2.0 / 3.0;                         
    oPatch.B210 = oPatch.B300 + EdgeB003 / 3.0;                               
    oPatch.B120 = oPatch.B300 + EdgeB003 * 2.0 / 3.0;                         
                                                                                                       
    oPatch.B021 = Projection(oPatch.B021, oPatch.B030, oPatch.Normal[0]);     
    oPatch.B012 = Projection(oPatch.B012, oPatch.B003, oPatch.Normal[1]);     
    oPatch.B102 = Projection(oPatch.B102, oPatch.B003, oPatch.Normal[1]);     
    oPatch.B201 = Projection(oPatch.B201, oPatch.B300, oPatch.Normal[2]);     
    oPatch.B210 = Projection(oPatch.B210, oPatch.B300, oPatch.Normal[2]);     
    oPatch.B120 = Projection(oPatch.B120, oPatch.B030, oPatch.Normal[0]);     
                                                                                                                                                                                                 
    vec3 Center = (oPatch.B003 + oPatch.B030 + oPatch.B300) / 3.0;                
    oPatch.B111 = (oPatch.B021 + oPatch.B012 + oPatch.B102 +             
                            oPatch.B201 + oPatch.B210 + oPatch.B120) / 6.0;       
    oPatch.B111 += (oPatch.B111 - Center) / 2.0;                              
}                                                                                               
                                                                                                
void main()                                                                                     
{                                                                                                                                            
    for (int i = 0 ; i < 3 ; i++) {                                                             
        oPatch.Normal[i] = _normals[i];                                                                                                    
    }                                                                                           
                                                                                                
    setControlPoints();                                                                            
                                                                                                
    // Calculate the tessellation levels                                                        
    gl_TessLevelOuter[0] = TessLevelOuter;                                                  
    gl_TessLevelOuter[1] = TessLevelOuter;                                                  
    gl_TessLevelOuter[2] = TessLevelOuter;                                                  
    gl_TessLevelInner[0] = TessLevelInner;                                                  
}